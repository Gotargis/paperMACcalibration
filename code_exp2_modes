# Install necessary packages only if not already installed
required_packages <- c("brms", "dplyr", "tidyr", "ggplot2")
new_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
if (length(new_packages)) install.packages(new_packages)

# Load libraries
lapply(required_packages, library, character.only = TRUE)

# Load the data
data <- read.table("C:/Users/Admin/Desktop/brms/data_tudo2.txt", header = TRUE, sep = "\t")

# Data preprocessing
new_data <- data %>%
  filter(perf_task != 0, MAC != -1, modes != "Escape") %>%  # Remove rows where perf_task is 0, MAC is -1, and modes is 'Escape'
  mutate(
    modes = as.character(modes),  # Maintain character if needed
    group = as.factor(group),      # Convert to factor for brms
    MAC = as.numeric(MAC)          # Ensure numeric type
  ) %>%
  drop_na(MAC, group)  # Remove rows with NA in important columns

# Fit the Bayesian multinomial logistic regression model without random effects for Participant_ID
fit <- brm(
  formula = modes ~ MAC + group + (1 | Participant_ID),
  data = new_data,
  family = categorical(link = "logit"), 
  chains = 4,
  iter = 2000,
  seed = 123,
  control = list(adapt_delta = 0.95)
)

# Summarize the model
print(summary(fit))

# Generate new data for predictions
data_grid <- expand.grid(
  MAC = seq(min(new_data$MAC, na.rm = TRUE), max(new_data$MAC, na.rm = TRUE), length.out = 100),
  group = factor(unique(new_data$group), levels = c("scaled", "wide", "narrow")) # Ensure factor ordering
)

# Ensure group levels in data_grid match the data
data_grid$group <- factor(data_grid$group, levels = levels(new_data$group))

# Generate posterior predictions without random effects
predictions <- posterior_epred(fit, newdata = data_grid, re_formula = NA, nsamples = 1000)  # Increase number of samples

# Reshape predictions array for plotting
pred_df <- as.data.frame(as.table(predictions)) %>%
  setNames(c("draw", "data_index", "mode", "probability")) %>%
  mutate(
    draw = as.numeric(draw),
    data_index = as.numeric(data_index),
    MAC = data_grid$MAC[data_index],  
    group = data_grid$group[data_index] 
  )

# Calculate mean and quantiles for credible intervals (e.g., 2.5% and 97.5%)
mean_ci_df <- pred_df %>%
  group_by(MAC, group, mode) %>%
  summarize(
    mean_prob = mean(probability, na.rm = TRUE),
    lower_ci = quantile(probability, probs = 0.025, na.rm = TRUE),
    upper_ci = quantile(probability, probs = 0.975, na.rm = TRUE),
    .groups = "drop" # Avoid unnecessary grouping
  ) %>%
  mutate(group = factor(group, levels = c("scaled", "wide", "narrow"))) # Order groups

# Plot mean probabilities with credible intervals as shaded areas
mean_ci_plot <- ggplot(mean_ci_df, aes(x = MAC, y = mean_prob, fill = mode)) +
  geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.3) +  # Adjusted alpha for better visibility, removed contour
  geom_line(aes(color = mode), linewidth = 1.5) +  # Thicker mean trend line for clarity
  facet_wrap(~ group, scales = "free") +
  scale_x_continuous(
    breaks = c(0, 1, 2, 3, 4, 5, 6, 7, 8), 
    labels = c("MAC", "+1", "+2", "+3", "+4", "+5", "+6", "+7", "+8")
  ) +
  theme_gray() +
  labs(
    title = " ",
    x = "Ratio A/H (relative to MAC)",
    y = "Probab. of Action Modes Occurrence",
    color = "Mode",
    fill = "Mode"
  )

# Display the plot
print(mean_ci_plot)

# Save the updated plot
ggsave("brms_mean_ci_plot_combined2.png", plot = mean_ci_plot, width = 10, height = 5, dpi = 600)
